[case testAnnotateNonNativeAttribute]
from typing import Any

def f1(x):
    return x.foo  # A: Get non-native attribute "foo".

def f2(x: Any) -> object:
    return x.foo  # A: Get non-native attribute "foo".

class C:
    foo: int

def f3(x: C) -> int:
    return x.foo

[case testAnnotateGenericBinaryOperations]
def generic_add(x):
    return x + 1  # A: Generic "+" operation.

def generic_sub(x):
    return x - 1  # A: Generic "-" operation.

def generic_mul(x):
    return x * 1  # A: Generic "*" operation.

def generic_div(x):
    return x / 1  # A: Generic "/" operation.

def generic_floor_div(x):
    return x // 1  # A: Generic "//" operation.

def generic_unary_plus(x):
    return +x  # A: Generic unary "+" operation.

def generic_unary_minus(x):
    return -x  # A: Generic unary "-" operation.

def native_int_ops(x: int, y: int) -> int:
    a = x + 1 - y
    return x * a // y

[case testAnnotateGenericBitwiseOperations]
def generic_and(x):
    return x & 1  # A: Generic "&" operation.

def generic_or(x):
    return x | 1  # A: Generic "|" operation.

def generic_xor(x):
    return x ^ 1  # A: Generic "^" operation.

def generic_left_shift(x):
    return x << 1  # A: Generic "<<" operation.

def generic_right_shift(x):
    return x >> 1  # A: Generic ">>" operation.

def generic_invert(x):
    return ~x  # A: Generic "~" operation.

def native_int_ops(x: int, y: int) -> int:
    a = (x & 1) << y
    return (x | a) >> (y ^ 1)

[case testAnnotateGenericComparisonOperations]
def generic_eq(x, y):
    return x == y  # A: Generic comparison operation.

def generic_ne(x, y):
    return x != y  # A: Generic comparison operation.

def generic_lt(x, y):
    return x < y  # A: Generic comparison operation.

def generic_le(x, y):
    return x <= y  # A: Generic comparison operation.

def generic_gt(x, y):
    return x > y  # A: Generic comparison operation.

def generic_ge(x, y):
    return x >= y  # A: Generic comparison operation.

def int_comparisons(x: int, y: int) -> int:
    if x == y:
        return 0
    if x < y:
        return 1
    if x > y:
        return 2
    return 3

[case testAnnotateTwoOperationsOnLine]
def f(x):
    return x.foo + 1  # A: Get non-native attribute "foo". Generic "+" operation.

[case testAnnotateNonNativeMethod]
from typing import Any

def f1(x):
    return x.foo()  # A: Call non-native method "foo".

def f2(x: Any) -> None:
    x.foo(1)  # A: Call non-native method "foo".
    x.foo(a=1)  # A: Call non-native method "foo".
    t = (1, 'x')
    x.foo(*t)  # A: Get non-native attribute "foo". Generic call operation.
    d = {"a": 1}
    x.foo(*d)  # A: Get non-native attribute "foo". Generic call operation.

class C:
    def foo(self) -> int:
        return 0

def g(c: C) -> int:
    return c.foo()

[case testAnnotateGlobalVariableAccess]
from typing import Final
import nonnative

x = 0
y: Final = 0

def read() -> int:
    return x  # A: Access global "x" through namespace dictionary (hint: access is faster if you can make it Final).

def assign(a: int) -> None:
    global x
    x = a  # A: Access global "x" through namespace dictionary (hint: access is faster if you can make it Final).

def read_final() -> int:
    return y

def read_nonnative() -> int:
    return nonnative.z  # A: Get non-native attribute "z".

[file nonnative.py]
z = 2

[case testAnnotateNestedFunction]
def f1() -> None:
    def g() -> None:  # A: A nested function object is allocated each time statement is executed. A module-level function would be faster.
        pass

    g()

def f2() -> int:
    l = lambda: 1  # A: A new object is allocated for lambda each time it is evaluated. A module-level function would be faster.
    return l()

[case testAnnotateGetSetItem]
from typing import List, Dict

def f1(x, y):
    return x[y]  # A: Generic indexing operation.

def f2(x, y, z):
    x[y] = z  # A: Generic indexed assignment.

def list_get_item(x: List[int], y: int) -> int:
    return x[y]

def list_set_item(x: List[int], y: int) -> None:
    x[y] = 5

def dict_get_item(d: Dict[str, str]) -> str:
    return d['x']

def dict_set_item(d: Dict[str, str]) -> None:
    d['x'] = 'y'

[case testAnnotateStrMethods]
def startswith(x: str) -> bool:
    return x.startswith('foo')

def islower(x: str) -> bool:
    return x.islower()  # A: Call non-native method "islower".

[case testAnnotateSpecificStdlibFeatures]
import functools
import itertools
from functools import partial
from itertools import chain, groupby, islice

def f(x: int, y: int) -> None: pass

def use_partial1() -> None:
    p = partial(f, 1)  # A: "functools.partial" is inefficient in compiled code.
    p(2)

def use_partial2() -> None:
    p = functools.partial(f, 1)  # A: "functools.partial" is inefficient in compiled code.
    p(2)

def use_chain1() -> None:
    for x in chain([1, 3], [4, 5]):  # A: "itertools.chain" is inefficient in compiled code (hint: replace with for loops).
        pass

def use_chain2() -> None:
    for x in itertools.chain([1, 3], [4, 5]):  # A: "itertools.chain" is inefficient in compiled code (hint: replace with for loops).
        pass

def use_groupby1() -> None:
    for a, b in groupby([('A', 'B')]):  # A: "itertools.groupby" is inefficient in compiled code.
        pass

def use_groupby2() -> None:
    for a, b in itertools.groupby([('A', 'B')]):  # A: "itertools.groupby" is inefficient in compiled code.
        pass

def use_islice() -> None:
    for x in islice([1, 2, 3], 1, 2):  # A: "itertools.islice" is inefficient in compiled code (hint: replace with for loop over index range).
        pass

[case testAnnotateGenericForLoop]
from typing import Iterable, Sequence, Iterator, List

def f1(a):
    for x in a:  # A: For loop uses generic operations (iterable has type "Any").
        pass

def f2(a: Iterable[str]) -> None:
    for x in a:  # A: For loop uses generic operations (iterable has the abstract type "typing.Iterable").
        pass

def f3(a: Sequence[str]) -> None:
    for x in a:  # A: For loop uses generic operations (iterable has the abstract type "typing.Sequence").
        pass

def f4(a: Iterator[str]) -> None:
    for x in a:  # A: For loop uses generic operations (iterable has the abstract type "typing.Iterator").
        pass

def good1(a: List[str]) -> None:
    for x in a:
        pass

class C:
    def __iter__(self) -> Iterator[str]:
        assert False

def good2(a: List[str]) -> None:
    for x in a:
        pass

[case testAnnotateIsinstance]
from typing import Protocol, runtime_checkable, Union

@runtime_checkable
class P(Protocol):
    def foo(self) -> None: ...

class C: pass

class D(C):
    def bar(self) -> None: pass

def bad1(x: object) -> bool:
    return isinstance(x, P)  # A: Expensive isinstance() check against protocol "P".

def bad2(x: object) -> bool:
    return isinstance(x, (str, P))  # A: Expensive isinstance() check against protocol "P".

def good1(x: C) -> bool:
    if isinstance(x, D):
        x.bar()
    return isinstance(x, D)

def good2(x: Union[int, str]) -> int:
    if isinstance(x, int):
        return x + 1
    else:
        return int(x + "1")
[typing fixtures/typing-full.pyi]
