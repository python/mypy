[case testNewFrozenSet]
from typing import FrozenSet
def f() -> FrozenSet[int]:
    return frozenset({1, 2, 3})
[out]
def f():
    r0 :: set
    r1 :: object
    r2 :: i32
    r3 :: bit
    r4 :: object
    r5 :: i32
    r6 :: bit
    r7 :: object
    r8 :: i32
    r9 :: bit
    r10 :: frozenset
L0:
    r0 = PySet_New(0)
    r1 = object 1
    r2 = PySet_Add(r0, r1)
    r3 = r2 >= 0 :: signed
    r4 = object 2
    r5 = PySet_Add(r0, r4)
    r6 = r5 >= 0 :: signed
    r7 = object 3
    r8 = PySet_Add(r0, r7)
    r9 = r8 >= 0 :: signed
    r10 = PyFrozenSet_New(r0)
    return r10

[case testNewEmptyFrozenSet]
from typing import FrozenSet
def f1() -> FrozenSet[int]:
    return frozenset()

def f2() -> FrozenSet[int]:
    return frozenset(())
[out]
def f1():
    r0 :: frozenset
L0:
    r0 = PyFrozenSet_New(0)
    return r0
def f2():
    r0 :: tuple[]
    r1 :: object
    r2 :: frozenset
L0:
    r0 = ()
    r1 = box(tuple[], r0)
    r2 = PyFrozenSet_New(r1)
    return r2

[case testNewFrozenSetFromIterable]
from typing import FrozenSet, List, TypeVar

T = TypeVar("T")

def f(l: List[T]) -> FrozenSet[T]:
    return frozenset(l)
[out]
def f(l):
    l :: list
    r0 :: frozenset
L0:
    r0 = PyFrozenSet_New(l)
    return r0

[case testFrozenSetSize]
from typing import FrozenSet
def f() -> int:
    return len(frozenset((1, 2, 3)))
[out]
def f():
    r0 :: tuple[int, int, int]
    r1 :: object
    r2 :: frozenset
    r3 :: ptr
    r4 :: native_int
    r5 :: short_int
L0:
    r0 = (2, 4, 6)
    r1 = box(tuple[int, int, int], r0)
    r2 = PyFrozenSet_New(r1)
    r3 = get_element_ptr r2 used :: PySetObject
    r4 = load_mem r3 :: native_int*
    keep_alive r2
    r5 = r4 << 1
    return r5

[case testFrozenSetContains]
from typing import FrozenSet
def f() -> bool:
    x = frozenset((3, 4))
    return (5 in x)
[out]
def f():
    r0 :: tuple[int, int]
    r1 :: object
    r2, x :: frozenset
    r3 :: object
    r4 :: i32
    r5 :: bit
    r6 :: bool
L0:
    r0 = (6, 8)
    r1 = box(tuple[int, int], r0)
    r2 = PyFrozenSet_New(r1)
    x = r2
    r3 = object 5
    r4 = PySet_Contains(x, r3)
    r5 = r4 >= 0 :: signed
    r6 = truncate r4: i32 to builtins.bool
    return r6

[case testFrozenSetFromRange1]
from typing import FrozenSet
def fn() -> FrozenSet[int]:
    return frozenset(range(3))
[out]
def fn():
    r0, r1 :: object
    r2 :: object[1]
    r3 :: object_ptr
    r4 :: object
    r5 :: range
    r6 :: frozenset
L0:
    r0 = load_address PyRange_Type
    r1 = object 3
    r2 = [r1]
    r3 = load_address r2
    r4 = PyObject_Vectorcall(r0, r3, 1, 0)
    keep_alive r1
    r5 = cast(range, r4)
    r6 = PyFrozenSet_New(r5)
    return r6

[case testFrozenSetFromRange2]
from typing import FrozenSet
def fn() -> FrozenSet[int]:
    return frozenset(range(1, 3))
[out]
def fn():
    r0, r1, r2 :: object
    r3 :: object[2]
    r4 :: object_ptr
    r5 :: object
    r6 :: range
    r7 :: frozenset
L0:
    r0 = load_address PyRange_Type
    r1 = object 1
    r2 = object 3
    r3 = [r1, r2]
    r4 = load_address r3
    r5 = PyObject_Vectorcall(r0, r4, 2, 0)
    keep_alive r1, r2
    r6 = cast(range, r5)
    r7 = PyFrozenSet_New(r6)
    return r7

[case testFrozenSetFromRange3]
from typing import FrozenSet
def fn() -> FrozenSet[int]:
    return frozenset(range(1, 3, 2))
[out]
def fn():
    r0, r1, r2, r3 :: object
    r4 :: object[3]
    r5 :: object_ptr
    r6 :: object
    r7 :: range
    r8 :: frozenset
L0:
    r0 = load_address PyRange_Type
    r1 = object 1
    r2 = object 3
    r3 = object 2
    r4 = [r1, r2, r3]
    r5 = load_address r4
    r6 = PyObject_Vectorcall(r0, r5, 3, 0)
    keep_alive r1, r2, r3
    r7 = cast(range, r6)
    r8 = PyFrozenSet_New(r7)
    return r8

[case testFrozenSetFromRange4]
from typing import FrozenSet
def fn() -> FrozenSet[str]:
    return frozenset(str(i) for i in range(3))
[out]
def fn():
    r0 :: list
    r1 :: short_int
    i :: int
    r2 :: bit
    r3 :: str
    r4 :: i32
    r5 :: bit
    r6 :: short_int
    r7 :: frozenset
L0:
    r0 = PyList_New(0)
    r1 = 0
    i = r1
L1:
    r2 = int_lt r1, 6
    if r2 goto L2 else goto L4 :: bool
L2:
    r3 = CPyTagged_Str(i)
    r4 = PyList_Append(r0, r3)
    r5 = r4 >= 0 :: signed
L3:
    r6 = r1 + 2
    r1 = r6
    i = r6
    goto L1
L4:
    r7 = PyFrozenSet_New(r0)
    return r7

[case testFrozenSetFromRange5]
from typing import FrozenSet
def fn() -> FrozenSet[str]:
    return frozenset(str(i) for i in range(1, 3))
[out]
def fn():
    r0 :: list
    r1 :: short_int
    i :: int
    r2 :: bit
    r3 :: str
    r4 :: i32
    r5 :: bit
    r6 :: short_int
    r7 :: frozenset
L0:
    r0 = PyList_New(0)
    r1 = 2
    i = r1
L1:
    r2 = int_lt r1, 6
    if r2 goto L2 else goto L4 :: bool
L2:
    r3 = CPyTagged_Str(i)
    r4 = PyList_Append(r0, r3)
    r5 = r4 >= 0 :: signed
L3:
    r6 = r1 + 2
    r1 = r6
    i = r6
    goto L1
L4:
    r7 = PyFrozenSet_New(r0)
    return r7

[case testFrozenSetFromRange6]
from typing import FrozenSet
def fn() -> FrozenSet[str]:
    return frozenset(str(i) for i in range(1, 3, 2))
[out]
def fn():
    r0 :: list
    r1 :: short_int
    i :: int
    r2 :: bit
    r3 :: str
    r4 :: i32
    r5 :: bit
    r6 :: short_int
    r7 :: frozenset
L0:
    r0 = PyList_New(0)
    r1 = 2
    i = r1
L1:
    r2 = int_lt r1, 6
    if r2 goto L2 else goto L4 :: bool
L2:
    r3 = CPyTagged_Str(i)
    r4 = PyList_Append(r0, r3)
    r5 = r4 >= 0 :: signed
L3:
    r6 = r1 + 4
    r1 = r6
    i = r6
    goto L1
L4:
    r7 = PyFrozenSet_New(r0)
    return r7
