[case testExhaustiveMatchNoFlag]
# flags: --python-version 3.12
a: int = 5
match a:
    case 1:
        pass
    case _:
        pass

b: str = "hello"
match b:
    case "bye":
        pass
    case _:
        pass

[case testNonExhaustiveMatchNoFlag]
# flags: --python-version 3.12
a: int = 5
match a:
    case 1:
        pass

b: str = "hello"
match b:
    case "bye":
        pass


[case testExhaustiveMatchWithFlag]
# flags: --python-version 3.12 --only-allow-exhaustive-match-statements
a: int = 5
match a:
    case 1:
        pass
    case _:
        pass

b: str = "hello"
match b:
    case "bye":
        pass
    case _:
        pass

[case testNonExhaustiveMatchWithFlag]
# flags: --python-version 3.12 --only-allow-exhaustive-match-statements
a: int = 5
match a: # E: Cases within match statement do not exhaustively handle all values: "int". If not intended to handle all cases, use `case _: pass`
    case 1:
        pass

b: str = "hello"
match b: # E: Cases within match statement do not exhaustively handle all values: "str". If not intended to handle all cases, use `case _: pass`
    case "bye":
        pass

[case testEnumNonExhaustiveWithFlag]
# flags: --python-version 3.12 --only-allow-exhaustive-match-statements

import enum

class Color(enum.Enum):
    RED = 1
    BLUE = 2
    GREEN = 3

val: Color = Color.RED

match val: # E: Cases within match statement do not exhaustively handle all values: "Literal[Color.GREEN]". If not intended to handle all cases, use `case _: pass`
    case Color.RED:
        a = "red"
    case Color.BLUE:
        a= "blue"

[builtins fixtures/enum.pyi]


[case testEnumExhaustiveWithFlag]
# flags: --python-version 3.12 --only-allow-exhaustive-match-statements

import enum

class Color(enum.Enum):
    RED = 1
    BLUE = 2

val: Color = Color.RED

match val:
    case Color.RED:
        a = "red"
    case Color.BLUE:
        a= "blue"

[builtins fixtures/enum.pyi]

[case testEnumMultipleMissingMatchesWithFlag]
# flags: --python-version 3.12 --only-allow-exhaustive-match-statements

import enum

class Color(enum.Enum):
    RED = 1
    BLUE = 2
    GREEN = 3

val: Color = Color.RED

match val: # E: Cases within match statement do not exhaustively handle all values: "Literal[Color.BLUE, Color.GREEN]". If not intended to handle all cases, use `case _: pass`
    case Color.RED:
        a = "red"


[builtins fixtures/enum.pyi]

[case testEnumFallbackWithFlag]
# flags: --python-version 3.12 --only-allow-exhaustive-match-statements

import enum

class Color(enum.Enum):
    RED = 1
    BLUE = 2
    GREEN = 3

val: Color = Color.RED

match val:
    case Color.RED:
        a = "red"
    case _:
        a = "other"


[builtins fixtures/enum.pyi]
