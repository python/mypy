import pathlib
import typing
from . import demo as demo
from typing import overload

class StaticMethods:
    def __init__(self, *args, **kwargs) -> None: ...
    @overload
    @staticmethod
    def overloaded_static_method(value: typing.SupportsInt) -> int: ...
    @overload
    @staticmethod
    def overloaded_static_method(value: typing.SupportsFloat) -> float: ...
    @staticmethod
    def some_static_method(a: typing.SupportsInt, b: typing.SupportsInt) -> int: ...

class TestStruct:
    field_readwrite: int
    field_readwrite_docstring: int
    def __init__(self, *args, **kwargs) -> None: ...
    @property
    def field_readonly(self) -> int: ...

def func_incomplete_signature(*args, **kwargs): ...
def func_returning_optional() -> int | None: ...
def func_returning_pair() -> tuple[int, float]: ...
def func_returning_path() -> pathlib.Path: ...
def func_returning_vector() -> list[float]: ...
